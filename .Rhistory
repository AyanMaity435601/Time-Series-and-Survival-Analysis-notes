par(mfrow=c(1,2))
plot(ACF, type="h", xlab="lag", ylim=c(-.8,1)); abline(h=0)
plot(PACF, type="h", xlab="lag", ylim=c(-.8,1)); abline(h=0)
########################################
# Fitting of Dow Jones Utilities Index
# --------------------------------------
library(itsmr)
plot.ts(dowj,ylab='Utility Index',main='Dow Jones Utility Index')
dowj_d1 <- diff(dowj)
plot.ts(dowj_d1,ylab='Utility Index',main='Dow Jones Utility Index')
library(astsa)
acf2(dowj_d1)
# --------------------------------------
# Parameter Estimation Algorithms
# --------------------------------------
# dowj_d1.yw = yw(dowj_d1,p=1);print(dowj_d1.yw)            # Yule-Walker (AR)
# dowj_d1.bg = burg(dowj_d1,p=1);print(dowj_d1.bg)          # Burge (AR)
# dowj_d1.ia = ia(dowj_d1,q=2);print(dowj_d1.ia)            # Innovation (MA)
dowj_d1.ml = arma(dowj_d1,p=1,q=0);print(dowj_d1.ml)      # MLE (ARMA)
dowj_d1.at=autofit(dowj_d1,p=0:4,q=0:4);print(dowj_d1.at) # Autofit by mle
########################################
# Fitting of Lake Huron (Raw)
# --------------------------------------
plot.ts(LakeHuron)
acf2(LakeHuron)
# --------------------------------------
# Parameter Estimation Algorithms
# --------------------------------------
# huron.yw = yw(LakeHuron,p=2);print(huron.yw)            # Yule-Walker
# huron.bg = burg(LakeHuron,p=2);print(huron.bg)          # Burge
# huron.hn = hannan(LakeHuron,p=1,q=1);print(huron.hn)    # Hannan
huron.ml = arma(LakeHuron,p=1,q=1);print(huron.ml)      # mle
huron.at=autofit(LakeHuron,p=0:5,q=0:5);print(huron.at) # Autofit by mle
########################################
# Fitting data with trend
# --------------------------------------
plot.ts(LakeHuron-570,type="o",ylab="level in feet")
trFit <- lm(LakeHuron-570~time(LakeHuron))
summary(trFit)
abline(trFit,col="red")
plot(as.numeric(time(LakeHuron)),trFit$residuals,
type="o",xlab="Year",ylab="Residuals")
# --------------------------------------
# Fitting data after removing trend
# --------------------------------------
plot.ts(trFit$residuals)
acf2(trFit$residuals)
huron.res.at=autofit(trFit$residuals,p=0:5,q=0:5);print(huron.res.at) # Autofit by mle
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
#######################################################################
#setwd("/SUDIPTA RKMV University/Time Series")
#######################################################################
# Time Series:- Fitting by arma() method
#######################################################################
# Autoregressive Process
# --------------------------------------
par(mfrow=c(2,1))
plot(arima.sim(list(order=c(1,0,0), ar=.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==+.9)))
plot(arima.sim(list(order=c(1,0,0), ar=-.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==-.9)))
#######################################################################
#setwd("/SUDIPTA RKMV University/Time Series")
#######################################################################
# Time Series:- Fitting by arma() method
#######################################################################
# Autoregressive Process
# --------------------------------------
par(mfrow=c(2,1),mar=c(3,2,1,0)+.5, mgp=c(1.6,.6,0))
plot(arima.sim(list(order=c(1,0,0), ar=.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==+.9)))
plot(arima.sim(list(order=c(1,0,0), ar=-.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==-.9)))
# --------------------------------------
# Moving Average process
# --------------------------------------
par(mfrow = c(2,1))
plot(arima.sim(list(order=c(0,0,1), ma=.5), n=100), ylab="x",
main=(expression(MA(1)~~~theta==+.5)))
#######################################################################
# setwd("/SUDIPTA RKMV University/Time Series")
#######################################################################
# Time Series:- Fitting and Forecasting by arima() method
#######################################################################
# Fitting of Lake Huron Data
# --------------------------------------
plot(LakeHuron, ylab="Height", xlab="Year", main="Lake Huron")
#######################################################################
# setwd("/SUDIPTA RKMV University/Time Series")
#######################################################################
# Time Series:- Fitting and Forecasting by arima() method
#######################################################################
# Fitting of Lake Huron Data
# --------------------------------------
plot(LakeHuron, ylab="Height", xlab="Year", main="Lake Huron")
# --------------------------------------
# Fitting data after removing trend
# --------------------------------------
plot.ts(trFit$residuals)
########################################
# Fitting of Lake Huron (Raw)
# --------------------------------------
plot.ts(LakeHuron)
acf2(LakeHuron)
# --------------------------------------
# Parameter Estimation Algorithms
# --------------------------------------
# huron.yw = yw(LakeHuron,p=2);print(huron.yw)            # Yule-Walker
# huron.bg = burg(LakeHuron,p=2);print(huron.bg)          # Burge
# huron.hn = hannan(LakeHuron,p=1,q=1);print(huron.hn)    # Hannan
huron.ml = arma(LakeHuron,p=1,q=1);print(huron.ml)      # mle
huron.at=autofit(LakeHuron,p=0:5,q=0:5);print(huron.at) # Autofit by mle
########################################
# Fitting data with trend
# --------------------------------------
plot.ts(LakeHuron-570,type="o",ylab="level in feet")
trFit <- lm(LakeHuron-570~time(LakeHuron))
summary(trFit)
abline(trFit,col="red")
plot(as.numeric(time(LakeHuron)),trFit$residuals,
type="o",xlab="Year",ylab="Residuals")
# --------------------------------------
# Fitting data after removing trend
# --------------------------------------
plot.ts(trFit$residuals)
acf2(trFit$residuals)
huron.res.at=autofit(trFit$residuals,p=0:5,q=0:5);print(huron.res.at) # Autofit by mle
#######################################################################
# setwd("/SUDIPTA RKMV University/Time Series")
#######################################################################
# Time Series:- Fitting and Forecasting by arima() method
#######################################################################
# Fitting of Lake Huron Data
# --------------------------------------
plot(LakeHuron, ylab="Height", xlab="Year", main="Lake Huron")
library(astsa)
acf2(LakeHuron,max.lag=48)                      # ACF & PACF values with graphic
library(itsmr)
huron.at = autofit(LakeHuron, p = 0:5, q = 0:5) # ARMA Model Selecton
# AR order selection
p=length(huron.at$phi)
if(p==1 && huron.at$phi[1]==0)
p=0
# MA order selection
q=length(huron.at$theta)
if(q==1 && huron.at$theta[1]==0)
q=0
huron.aim = arima(LakeHuron, order=c(p,0,q))
print(huron.aim);huron.at$aicc                  # ARIMA Model
########################################
# Forecasting of Lake Huron Data
# --------------------------------------
huron.aim.pr = predict(huron.aim, n.ahead=30)   # Forecasting data
ts.plot(LakeHuron,huron.aim.pr$pred, col=c('black','blue'),
xlim=c(1875,1972+30),ylab="Recruitment",main="Lake Huron")
lines(huron.aim.pr$pred+huron.aim.pr$se, lty="dashed", col='red')
lines(huron.aim.pr$pred-huron.aim.pr$se, lty="dashed", col='red')
#######################################################################
# Fitting of Dow Jones
# --------------------------------------
plot.ts(dowj, main="Dow Jones")
acf2(dowj)                                        # ACF & PACF values with graphic
djd1 <- diff(dowj)                                # first difference
plot.ts(djd1, main="Dow Jones First Difference")
acf2(djd1)                                        # ACF & PACF values with graphic
djd1.at = autofit(djd1, p = 0:4, q = 0:4)         # ARMA model selection
# AR order selection
p=length(djd1.at$phi)
if(p==1 && djd1.at$phi[1]==0)
p=0
# MA order selection
q=length(djd1.at$theta)
if(q==1 && djd1.at$theta[1]==0)
q=0
djd1.aim = arima(djd1, order=c(p,0,q))
print(djd1.aim);djd1.at$aicc                      # Resulting ARIMA Model
########################################
# Forecasting of Dow Jones Utility Index
# --------------------------------------
djd1.aim.pr = predict(djd1.aim, n.ahead=100)      # Forecasting differeance of data
ts.plot(ts(djd1),djd1.aim.pr$pred,
col=c('black','blue'),xlim=c(0,length(djd1)+100),
ylab="Index Value",main="Dow Jones Utility Index First Difference")
lines(djd1.aim.pr$pred+djd1.aim.pr$se, lty="dashed", col='red')
lines(djd1.aim.pr$pred-djd1.aim.pr$se, lty="dashed", col='red')
ts.plot(ts(dowj),
ts(dowj[length(dowj)]+cumsum(djd1.aim.pr$pred),start=length(dowj)),
col=c('black','blue'),xlim=c(0,length(dowj)+100),
ylab="Index Value",main="Dow Jones Utility Index")
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
#=========================================================================
# Parametric Survival Models
#-------------------------------------------------------------------------
# Gamma Distribution
par(mfrow=c(1,3))
plot(seq(0,10,.1),dgamma(seq(0,10,.1), shape=.5, scale=1),type='l',col=2,xlab = "Time",
ylab='f(t)',ylim = c(0,2));
lines(seq(0,10,.1),dgamma(seq(0,10,.1), shape=1, scale=1),col=3)
lines(seq(0,10,.1),dgamma(seq(0,10,.1), shape=2, scale=1),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(sub='Gamma Probability Density Function')
plot(seq(0,10,.1),pgamma(seq(0,10,.1), shape=.5, scale=1,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='S(t)',ylim = c(0,1.25));
lines(seq(0,10,.1),pgamma(seq(0,10,.1), shape=1, scale=1,lower.tail = FALSE),col=3)
lines(seq(0,10,.1),pgamma(seq(0,10,.1), shape=2, scale=1,lower.tail = FALSE),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(main='Figure 2A',sub='Gamma Survival Function')
plot(seq(0,10,.1),dgamma(seq(0,10,.1), shape=.5, scale=1)/pgamma(seq(0,10,.1), shape=.5, scale=1,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='h(t)',ylim = c(0,3));
lines(seq(0,10,.1),dgamma(seq(0,10,.1), shape=1, scale=1)/pgamma(seq(0,10,.1), shape=1, scale=1,lower.tail = FALSE),col=3)
lines(seq(0,10,.1),dgamma(seq(0,10,.1), shape=2, scale=1)/pgamma(seq(0,10,.1), shape=2, scale=1,lower.tail = FALSE),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(sub='Gamma Hazard Function')
#-------------------------------------------------------------------------
# Weibull Distribution
par(mfrow=c(1,3))
plot(seq(0,10,.1),dweibull(seq(0,10,.1), shape=.5, scale=1),type='l',col=2,xlab = "Time",
ylab='f(t)',ylim = c(0,1.5));
lines(seq(0,10,.1),dweibull(seq(0,10,.1), shape=1, scale=1),col=3)
lines(seq(0,10,.1),dweibull(seq(0,10,.1), shape=2, scale=1),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(sub='Weibull Probability Density Function')
plot(seq(0,10,.1),pweibull(seq(0,10,.1), shape=.5, scale=1,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='S(t)',ylim = c(0,1.25));
lines(seq(0,10,.1),pweibull(seq(0,10,.1), shape=1, scale=1,lower.tail = FALSE),col=3)
lines(seq(0,10,.1),pweibull(seq(0,10,.1), shape=2, scale=1,lower.tail = FALSE),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(main='Figure 2B',sub='Weibull Survival Function')
plot(seq(0,10,.1),dweibull(seq(0,10,.1), shape=.5, scale=1)/pweibull(seq(0,10,.1), shape=.5, scale=1,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='h(t)',ylim = c(0,5));
lines(seq(0,10,.1),dweibull(seq(0,10,.1), shape=1, scale=1)/pweibull(seq(0,10,.1), shape=1, scale=1,lower.tail = FALSE),col=3)
lines(seq(0,10,.1),dweibull(seq(0,10,.1), shape=2, scale=1)/pweibull(seq(0,10,.1), shape=2, scale=1,lower.tail = FALSE),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(sub='Weibull Hazard Function')
#-------------------------------------------------------------------------
# LogNormal Distribution
par(mfrow=c(1,3))
plot(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = -1, sdlog = 1),type='l',col=2,xlab = "Time",
ylab='f(t)',ylim = c(0,2.2))
lines(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = 0, sdlog = .5),col=3)
lines(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = 0, sdlog = 1),col=4)
lines(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = 0, sdlog = 2),col=5)
lines(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = 1, sdlog = 1),col=6)
legend('topright',c("m=-1,sd=1","m=0,sd=0.5","m=0,sd=1.0","m=0,sd=2.0","m=+1,sd=1"),lty=c(1,1,1,1,1),col=c(2,3,4,5,6))
title(sub='LogNormal Probability Density Function')
plot(seq(0,10,.1),plnorm(seq(0,10,.1), meanlog = -1, sdlog = 1,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='S(t)',ylim = c(0,1.25));
lines(seq(0,10,.1),plnorm(seq(0,10,.1), meanlog = 0, sdlog = .5,lower.tail = FALSE),col=3)
lines(seq(0,10,.1),plnorm(seq(0,10,.1), meanlog = 0, sdlog = 1,lower.tail = FALSE),col=4)
lines(seq(0,10,.1),plnorm(seq(0,10,.1), meanlog = 0, sdlog = 2,lower.tail = FALSE),col=5)
lines(seq(0,10,.1),plnorm(seq(0,10,.1), meanlog = 1, sdlog = 1,lower.tail = FALSE),col=6)
legend('topright',c("m=-1,sd=1","m=0,sd=0.5","m=0,sd=1.0","m=0,sd=2.0","m=+1,sd=1"),lty=c(1,1,1,1,1),col=c(2,3,4,5,6))
title(main='Figure 2C',sub='LogNormal Survival Function')
plot(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = -1, sdlog = 1)/plnorm(seq(0,10,.1), meanlog = -1, sdlog = 1,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='h(t)',ylim = c(0,3));
lines(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = 0, sdlog = .5)/plnorm(seq(0,10,.1), meanlog = 0, sdlog = .5,lower.tail = FALSE),col=3)
lines(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = 0, sdlog = 1)/plnorm(seq(0,10,.1), meanlog = 0, sdlog = 1,lower.tail = FALSE),col=4)
lines(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = 0, sdlog = 2)/plnorm(seq(0,10,.1), meanlog = 0, sdlog = 2,lower.tail = FALSE),col=5)
lines(seq(0,10,.1),dlnorm(seq(0,10,.1), meanlog = 1, sdlog = 1)/plnorm(seq(0,10,.1), meanlog = 1, sdlog = 1,lower.tail = FALSE),col=6)
legend('topright',c("m=-1,sd=1","m=0,sd=0.5","m=0,sd=1.0","m=0,sd=2.0","m=+1,sd=1"),lty=c(1,1,1,1,1),col=c(2,3,4,5,6))
title(sub='LogNormal Hazard Function')
#-------------------------------------------------------------------------
# Log logistic Distribution
library(actuar)
par(mfrow=c(1,3))
plot(seq(0,10,.1),dllogis(seq(0,10,.1),scale = 1,shape = 0.5),type='l',col=2,xlab = "Time",
ylab='f(t)',ylim = c(0,2.2))
lines(seq(0,10,.1),dllogis(seq(0,10,.1),scale = 1,shape = 1),col=3)
lines(seq(0,10,.1),dllogis(seq(0,10,.1),scale = 1,shape = 2),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(sub='Log-logistic Probability Density Function')
plot(seq(.0,10,.1),pllogis(seq(0,10,.1),scale = 1,shape = 0.5,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='S(t)',ylim = c(0,1.25));
lines(seq(0,10,.1),pllogis(seq(0,10,.1),scale = 1,shape = 1,lower.tail = FALSE),col=3)
lines(seq(0,10,.1),pllogis(seq(0,10,.1),scale = 1,shape = 2,lower.tail = FALSE),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(main='Figure 2D',sub='Log-logistic Survival Function')
plot(seq(0,10,.1),dllogis(seq(0,10,.1),scale = 1,shape = 0.5)/pllogis(seq(0,10,.1),scale = 1,shape = 0.5,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='h(t)',ylim = c(0,3));
lines(seq(0,10,.1),dllogis(seq(0,10,.1),scale = 1,shape = 1)/pllogis(seq(0,10,.1),scale = 1,shape = 1,lower.tail = FALSE),col=3)
lines(seq(0,10,.1),dllogis(seq(0,10,.1),scale = 1,shape = 2)/pllogis(seq(0,10,.1),scale = 1,shape = 2,lower.tail = FALSE),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(sub='Log-logistic Hazard Function')
#-------------------------------------------------------------------------
# Gompertz Distribution
library(VGAM)
par(mfrow=c(1,3))
plot(seq(.1,10,.1),dgompertz(seq(.1,10,.1),scale = 1,shape = 0.5),type='l',col=2,xlab = "Time",
ylab='f(t)',ylim = c(0,2.2))
lines(seq(.1,10,.1),dgompertz(seq(.1,10,.1),scale = 1,shape = 1),col=3)
lines(seq(.1,10,.1),dgompertz(seq(.1,10,.1),scale = 1,shape = 2),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(sub='Gompetz Probability Density Function')
plot(seq(.1,10,.1),pgompertz(seq(.1,10,.1),scale = 1,shape = 0.5,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='S(t)',ylim = c(0,1.25));
lines(seq(.1,10,.1),pgompertz(seq(.1,10,.1),scale = 1,shape = 1,lower.tail = FALSE),col=3)
lines(seq(.1,10,.1),pgompertz(seq(.1,10,.1),scale = 1,shape = 2,lower.tail = FALSE),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(main='Figure 2E',sub='Gompertz Survival Function')
plot(seq(.1,10,.1),dgompertz(seq(.1,10,.1),scale = 1,shape = 0.5)/pgompertz(seq(.1,10,.1),scale = 1,shape = 0.5,lower.tail = FALSE),type='l',col=2,xlab = "Time",
ylab='h(t)',ylim = c(0,3));
lines(seq(.1,10,.1),dgompertz(seq(.1,10,.1),scale = 1,shape = 1)/pgompertz(seq(.1,10,.1),scale = 1,shape = 1,lower.tail = FALSE),col=3)
lines(seq(.1,10,.1),dgompertz(seq(.1,10,.1),scale = 1,shape = 2)/pgompertz(seq(.1,10,.1),scale = 1,shape = 2,lower.tail = FALSE),col=4)
legend('topright',c("Shape=0.5","Shape=1.0","Shape=2.0"),lty=c(1,1,1),col=c(2,3,4))
title(sub='Gompertz Hazard Function')
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
# Prepare Environment
#-------------------------------------------------------------------------
library(survival)
library(MASS)
library(fitdistrplus)
#=========================================================================
# Step 0. Get the data
#-------------------------------------------------------------------------
myCredit=read.csv('GermanCredit.csv')   # Extract the German Credit Data
head(myCredit)        # Have a glimpse of data
names(myCredit)       # the column names of the data
str(myCredit)         # types of variables
summary(myCredit)     # descriptive statistics
#=========================================================================
# Step 1. Preparing Right Censor Data
#-------------------------------------------------------------------------
Lifetime = myCredit$Duration                  # Right Censor Survival Data
Status = ifelse(myCredit$Class=="Bad",1,0)    # Censoring indicator variable (1 for complete obs, 0 for censored)
#=========================================================================
# Prepare Environment
#-------------------------------------------------------------------------
library(survival)
library(MASS)
library(fitdistrplus)
#=========================================================================
# Step 0. Get the data
#-------------------------------------------------------------------------
myCredit=read.csv('GermanCredit.csv')   # Extract the German Credit Data
head(myCredit)        # Have a glimpse of data
names(myCredit)       # the column names of the data
str(myCredit)         # types of variables
summary(myCredit)     # descriptive statistics
#=========================================================================
# Step 1. Preparing Right Censor Data
#-------------------------------------------------------------------------
Lifetime = myCredit$Duration                  # Right Censor Survival Data
Status = ifelse(myCredit$Class=="Bad",1,0)    # Censoring indicator variable (1 for complete obs, 0 for censored)
# Data preparation for AFT parametric fit
CensorData = data.frame(cbind(Lifetime,Status))                 # Censor Data
SurvObject = Surv(myCredit$Duration,(myCredit$Class)=="Bad")    # Survival Object
# Preparing right-censored data for parametric fit
left = Lifetime; right = Lifetime; right[which(Status==0)] = NA # left=right for failed and NA for censored
LRdata = data.frame(cbind(left,right))
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
FitW = fitdistcens(LRdata,"weibull"); ShapeW = FitW$est[1];     ScaleW = FitW$est[2]
FitLN = fitdistcens(LRdata,"lnorm");  LocationLN=FitLN$est[1];  ShapeLN = FitLN$est[2]
library(actuar)
FitLL = fitdistcens(LRdata,"llogis"); ShapeLL = FitLL$est[1];   ScaleLL = FitLL$est[2]
par(mfrow=c(1,1))
trange = (0:max(na.omit(LRdata[,2])))                 # 0 to maximum failure time
plot(trange,1-pgamma(trange, shape = ShapeG, rate = RateG),xlab="Time",
ylab="Survival probability",ylim=c(0,1),col=2,type='l')      # gamma MLE
lines(trange,1-pweibull(trange, shape = ShapeW, scale = ScaleW),col=4)    # Weibull MLE
lines(trange,1-plnorm(trange,meanlog = LocationLN,sdlog = ShapeLN),col=6)    # lognormal MLE
lines(trange,1-pllogis(trange, shape = ShapeLL, scale = ScaleLL),col=8)    # loglogistic MLE
title("Figure 4")
legend('bottomleft',c("gamma MLE-S(t)","Weibull MLE-S(t)","log-Normal MLE-S(t)","log-Logistic MLE-S(t)"),lty=c(1,1,1,1),col=c(2,4,6,8),cex=.8)
#=========================================================================
# Step 3b. Parametric Survival Function Estimation using Covariate
# [Regression for right censored data]
#-------------------------------------------------------------------------
# Weibull regression
ResultW = survreg(SurvObject ~ Age+Amount+InstallmentRatePercentage+NumberExistingCredits+NumberPeopleMaintenance, data=myCredit, dist="weibull")
summary(ResultW)
ResultW = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="weibull")
summary(ResultW)
1/summary(ResultW)$scale      # shape parameter
#-------------------------------------------------------------------------
# lognormal regression
ResultLN = survreg(SurvObject ~ Age+Amount+InstallmentRatePercentage+NumberExistingCredits+NumberPeopleMaintenance, data=myCredit, dist="lognormal")
summary(ResultLN)
ResultLN = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="lognormal")
summary(ResultLN)
#-------------------------------------------------------------------------
# loglogistic regression
ResultLL = survreg(SurvObject ~ Age+Amount+InstallmentRatePercentage+NumberExistingCredits+NumberPeopleMaintenance, data=myCredit, dist="loglogistic")
summary(ResultLL)
ResultLL = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="loglogistic")
summary(ResultLL)
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
# Prepare Environment
#-------------------------------------------------------------------------
library(survival)
library(MASS)
library(fitdistrplus)
#=========================================================================
# Step 0. Get the data
#-------------------------------------------------------------------------
myCredit=read.csv('GermanCredit.csv')   # Extract the German Credit Data
head(myCredit)        # Have a glimpse of data
names(myCredit)       # the column names of the data
str(myCredit)         # types of variables
summary(myCredit)     # descriptive statistics
#=========================================================================
# Step 1. Preparing Right Censor Data
#-------------------------------------------------------------------------
Lifetime = myCredit$Duration                  # Right Censor Survival Data
Status = ifelse(myCredit$Class=="Bad",1,0)    # Censoring indicator variable (1 for complete obs, 0 for censored)
Status = ifelse(myCredit$Class=="Bad",1,0)    # Censoring indicator variable (1 for complete obs, 0 for censored)
# Data preparation for AFT parametric fit
CensorData = data.frame(cbind(Lifetime,Status))                 # Censor Data
SurvObject = Surv(myCredit$Duration,(myCredit$Class)=="Bad")    # Survival Object
CensorData
# Preparing right-censored data for parametric fit
left = Lifetime; right = Lifetime; right[which(Status==0)] = NA # left=right for failed and NA for censored
#=========================================================================
# Step 1. Preparing Right Censor Data
#-------------------------------------------------------------------------
Lifetime = myCredit$Duration                  # Right Censor Survival Data
Status = ifelse(myCredit$Class=="Bad",1,0)    # Censoring indicator variable (1 for complete obs, 0 for censored)
# Data preparation for AFT parametric fit
CensorData = data.frame(cbind(Lifetime,Status))                 # Censor Data
SurvObject = Surv(myCredit$Duration,(myCredit$Class)=="Bad")    # Survival Object
# Preparing right-censored data for parametric fit
left = Lifetime; right = Lifetime; right[which(Status==0)] = NA # left=right for failed and NA for censored
# Preparing right-censored data for parametric fit
left = Lifetime; right = Lifetime; right[which(Status==0)] = NA # left=right for failed and NA for censored
LRdata = data.frame(cbind(left,right))
LRdata
LRdata = data.frame(cbind(left,right))
#=========================================================================
# Step 3a. Parametric Survival Function Estimation without Covariate
#-------------------------------------------------------------------------
# Parametric estimate of survival function
FitG = fitdistcens(LRdata,"gamma");   ShapeG = FitG$est[1];     RateG = FitG$est[2]
FitW = fitdistcens(LRdata,"weibull"); ShapeW = FitW$est[1];     ScaleW = FitW$est[2]
FitLN = fitdistcens(LRdata,"lnorm");  LocationLN=FitLN$est[1];  ShapeLN = FitLN$est[2]
library(actuar)
FitLL = fitdistcens(LRdata,"llogis"); ShapeLL = FitLL$est[1];   ScaleLL = FitLL$est[2]
par(mfrow=c(1,1))
trange = (0:max(na.omit(LRdata[,2])))                 # 0 to maximum failure time
plot(trange,1-pgamma(trange, shape = ShapeG, rate = RateG),xlab="Time",
ylab="Survival probability",ylim=c(0,1),col=2,type='l')      # gamma MLE
lines(trange,1-pweibull(trange, shape = ShapeW, scale = ScaleW),col=4)    # Weibull MLE
lines(trange,1-plnorm(trange,meanlog = LocationLN,sdlog = ShapeLN),col=6)    # lognormal MLE
lines(trange,1-pllogis(trange, shape = ShapeLL, scale = ScaleLL),col=8)    # loglogistic MLE
title("Figure 4")
legend('bottomleft',c("gamma MLE-S(t)","Weibull MLE-S(t)","log-Normal MLE-S(t)","log-Logistic MLE-S(t)"),lty=c(1,1,1,1),col=c(2,4,6,8),cex=.8)
#=========================================================================
# Step 3b. Parametric Survival Function Estimation using Covariate
# [Regression for right censored data]
#-------------------------------------------------------------------------
# Weibull regression
ResultW = survreg(SurvObject ~ Age+Amount+InstallmentRatePercentage+NumberExistingCredits+NumberPeopleMaintenance, data=myCredit, dist="weibull")
summary(ResultW)
ResultW = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="weibull")
summary(ResultW)
1/summary(ResultW)$scale      # shape parameter
#=========================================================================
# Step 3b. Parametric Survival Function Estimation using Covariate
# [Regression for right censored data]
#-------------------------------------------------------------------------
# Weibull regression
ResultW = survreg(SurvObject ~ Age+Amount+InstallmentRatePercentage+NumberExistingCredits+NumberPeopleMaintenance, data=myCredit, dist="weibull")
summary(ResultW)
ResultW = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="weibull")
summary(ResultW)
1/summary(ResultW)$scale      # shape parameter
#-------------------------------------------------------------------------
# lognormal regression
ResultLN = survreg(SurvObject ~ Age+Amount+InstallmentRatePercentage+NumberExistingCredits+NumberPeopleMaintenance, data=myCredit, dist="lognormal")
summary(ResultLN)
ResultLN = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="lognormal")
summary(ResultLN)
#-------------------------------------------------------------------------
# loglogistic regression
ResultLL = survreg(SurvObject ~ Age+Amount+InstallmentRatePercentage+NumberExistingCredits+NumberPeopleMaintenance, data=myCredit, dist="loglogistic")
summary(ResultLL)
ResultLL = survreg(SurvObject ~ Amount + InstallmentRatePercentage, data=myCredit, dist="loglogistic")
summary(ResultLL)
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
#=========================================================================
